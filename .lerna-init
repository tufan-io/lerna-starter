#!/usr/bin/env node

/**
 * automates the reconfiguration of a lerna-starter repo
 * designed to be run on postinstall after cloning the template repo.
 * self-destructs after first run. meant to be run only once.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const cp = require('child_process');

const resetPackageJson = (ctx) => {
  let pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  delete pkg.scripts.postinstall;
  pkg.name = ctx.app;
  pkg.description = '';
  // semantic versioning is only enabled for github
  pkg.version = (ctx.githost === 'github') ? '0.0.0-development' : '1.0.0';
  pkg.keywords = [];
  pkg.repository = `${ctx.githost}:${ctx.org}/${ctx.app}`;
  // remove scripts from distributed files
  pkg.files = [
    'dist',
    'docs'
  ];
  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2), 'utf8');
}

// Since this is a meta-script, it's not fair
// to install dev-dependencies. We have simpler
// local implementations of necessary npm modules,
// allowing us to do the needful.
// Post a first run, this file will be deleted from
// the cloned repo.

function sed(fname, match_re, replacement) {
  const content = fs.readFileSync(fname, 'utf8');
  fs.writeFileSync(fname, content.replace(match_re, replacement), 'utf8');
}

function rimraf(dir) {
  // console.log(`deleting ${dir}`);
  if (dir === '/') return;
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(function (file, index) {
      var curdir = path.join(dir, file);
      if (fs.lstatSync(curdir).isDirectory()) { // recurse
        rimraf(curdir);
      } else { // delete file
        fs.unlinkSync(curdir);
      }
    });
    fs.rmdirSync(dir);
  }
};

function spawnSync(cmdline, opts) {
  opts = opts || {
    cwd: process.cwd(),
    stdio: 'inherit'
  };
  const [cmd, ...args] = cmdline.split(' ');
  const result = cp.spawnSync(cmd, args, opts);
  if (result.status) {
    throw new Error(result);
  } else {
    return result;
  }
}

/**
 *
 * config = {
 *   app: 'name of the root lerna repo',
 *   org: 'github and npm account name',
 *   conduct: 'email to report code-of-conduct violations',
 *   githost: 'github, bitbucket or gitlab'
 * }
 *
 * @param {any} config
 */
function configLernaRoot(config) {
  const re = {
    app: /lerna-starter/g,
    org: /tufan-io/g,
    conduct: `[REPLACE EMAIL]`
  };

  // delete old git repo and initialize a new one.
  rimraf(path.join(process.cwd(), '.git'));
  rimraf(path.join(process.cwd(), 'scripts'));

  // initialize new git repo - skip for lerna repo
  spawnSync(`git init`);
  spawnSync(`git add . --all`);
  // by staging all cloned files, we can use `git diff` to help track all config changes
  // made to the repo.

  resetPackageJson(config);
  // reset changelog.md
  fs.writeFileSync('CHANGELOG.md', '', 'utf8');
  // sed('./package.json', re.app, config.app);
  const url = `${config.org}/${config.app}`;
  sed('./README.md', re.app, config.app);
  sed('./README.md', re.org, config.org);
  console.log(`project renamed to ${url}`);
  if (config.conduct) {
    sed('./code-of-conduct.md', re.conduct, config.conduct);
    console.log('--');
    console.log(`code-of-conduct contact email set to ${config.conduct}`);
  } else {
    console.log(`Please update the contact email in code-of-conduct.md`);
  }

  spawnSync(`npm install`);
  const giturl = `https://${config.githost}.com/${config.org}/${config.app}.git`;
  spawnSync(`git remote add origin ${giturl}`);

  fs.unlinkSync('.lerna-init');

  return config;
}

if (require.main !== module) {

  exports.configLernaRoot = configLernaRoot;

} else {
  // this is the purpose
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  // defaults
  const app = path.basename(process.cwd());
  const githost = 'github';

  let config = {};
  const p = new Promise((resolve, reject) => {
    console.log('---');
    const askGitHost = () => {
      rl.question(
        `git host(gh, bb or gl): `,
        answer => {
          if (answer) {
            const git = {
              gh: 'github',
              bb: 'bitbucket',
              gl: 'gitlab',
              gitlab: 'gitlab',
              github: 'github',
              bitbucket: 'bitbucket'
            }
            config.githost = git[answer];
            if (config.githost) {
              return resolve(config);
            } else {
              console.log('must be one of "gh", "bb", "gl"');
            }
          }
          askGitHost(); // loop
        });
    };
    askGitHost();
  }).then(config => {
    return new Promise((resolve, reject) => {
      const askGitOrg = () => {
        rl.question(`git user / org name: `,
          answer => {
            if (answer) {
              config.org = answer;
              return resolve(config);
            }
            askGitOrg(); // loop
          });
      };
      askGitOrg();
    });
  }).then(config => {
    return new Promise((resolve, reject) => {
      const appName = () => {
        rl.question(
          `Name of the lerna-repo(${app}): `,
          answer => {
            config.app = answer || app;
            return resolve(config);
          });
      }
      appName();
    });
  }).then(config => {
    return new Promise((resolve, reject) => {
      const askConductEmail = () => {
        rl.question(
          `Email address for code-of-conduct violations: `,
          conduct => {
            if (conduct) {
              config.conduct = conduct;
              rl.close();
              console.log('---');
              return resolve(config);
            }
            askConductEmail();
          });
      };
      askConductEmail();
    });
  }).then(
    configLernaRoot
  ).then(config => {
    console.log(``);
    console.log(`TODO: configure git username and email before committing `);
    console.log(``);
    console.log(`    git config user.name\ "John Doe\"`);
    console.log(`    git config user.email john@doe.com`);
    console.log(``);
    console.log(`---`);
    console.log(`The repo has been properly re-initialized.`);
    console.log(`Go forth and make a brave new npm package...`);
    console.log(`---`);
  }).catch(err => console.error(err));
}
