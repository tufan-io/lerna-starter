#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const cp = require('child_process');

const JSON2 = j => JSON.stringify(j, null, 2);

const resetPackageJson = (ctx, pkg) => {
  delete pkg.scripts.postinstall;
  pkg.name = ctx.npmNamespace ? `@${ctx.npmNamespace}/${ctx.subModule}` : ctx.subModule;
  pkg.description = ctx.description || '';
  pkg.version = '1.0.0';
  pkg.keywords = [];
  pkg.devDependencies['gitpkg'] = 'https://github.com/sramam/gitpkg#forked-release"';
  pkg.repository = ctx.giturl;
  // remove scripts from distributed files
  pkg.files = [
    'dist',
    'docs'
  ];
  pkg.scripts['git-publish'] = 'gitpkg publish';
  delete pkg.scripts['staged-mods-ok'];
  delete pkg.scripts['no-mods'];
  delete pkg.scripts['coveralls-report'];
  delete pkg.scripts['precommit'];
  delete pkg.scripts['prepush'];
  delete pkg.scripts['semantic-release'];
  delete pkg.scripts['postinstall'];
  delete pkg['run-batch']['precommit'];
  delete pkg['run-batch']['prepush'];

  return pkg;
}

// Since this is a meta-script, it's not fair
// to install dev-dependencies. We have simpler
// local implementations of necessary npm modules,
// allowing us to do the needful.
// Post a first run, this file will be deleted from
// the cloned repo.

function sed(fname, match_re, replacement) {
  const content = fs.readFileSync(fname, 'utf8');
  fs.writeFileSync(fname, content.replace(match_re, replacement), 'utf8');
}

function rimraf(fpath) {
  if (fpath === '/') return; // do not delete root! :)
  try {
    const stat = fs.statSync(fpath);
    if (stat.isDirectory()) {
      fs.readdirSync(fpath).forEach(function (file, index) {
        var curdir = fpath.join(fpath, file);
        if (fs.lstatSync(curdir).isDirectory()) { // recurse
          rimraf(curdir);
        } else { // delete file
          fs.unlinkSync(curdir);
        }
      });
      fs.rmdirSync(fpath);
    } else {
      fs.unlinkSync(fpath);
    }
  } catch (err) {} // noop;
};

function mv(file1, file2) {
  try {
    fs.unlinkSync(file2);
  } catch (err) {}
  fs.renameSync(file1, file2);
}

function spawnSync(cmdline, opts) {
  const [cmd, ...args] = cmdline.split(' ');
  const result = cp.spawnSync(cmd, args, opts);
  if (result.status) {
    throw new Error(result);
  } else {
    return result;
  }
}

/**
 *
 * Shape of config:
 *    {
 *      cwd: 'directory of the root lerna component',
 *      subModule: 'name of sub-module',
 *      npmNamespace: 'npm namespace - typically, picked from root component',
 *      giturl: 'URL of the parent lerna repo with gitpkg tag attached.',
 *      conduct: 'email for reporting code-of-conduct violations.'
 *    }
 *
 * @param {any} config
 * @returns
 */
function configLernaSubModule(config) {
  const subModuleDir = path.resolve(config.cwd, `sub-modules/${config.subModule}`);
  const re = {
    app: /typescript-starter-node/g,
    org: /sramam/g,
    conduct: `[REPLACE EMAIL]`,
  };

  // get and adapt git-url from rootRepo
  const rootPkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
  const gitRootUrl = rootPkg.repository.url || rootPkg.repository || undefined;
  if (!gitRootUrl) {
    throw new Error(`Seems we are missing a git url in the rootPkg. Please set & retry`);
  }

  config.giturl = `${gitRootUrl}#${config.subModule}-latest`;
  // extract org from the git-url
  config.npmNamespace = (
    config.giturl.match(/.*\/([^\/]+)\//) ||
    config.giturl.match(/.*:([^\/]+)\//)
  )[1];

  const spawnOpts = {
    cwd: config.cwd,
    stdio: 'inherit'
  };

  // clone template repo into directory
  spawnSync(
    `git clone -b ava --single-branch https://github.com/sramam/typescript-starter-node ${subModuleDir}`,
    spawnOpts);
  // remove some un-necessary artifacts in typescript-starter-node
  rimraf(`${subModuleDir}/scripts`); // scripts dir
  rimraf(`${subModuleDir}/.reinit`); // .reinit script
  mv(`${subModuleDir}/_travis.yml`, `${subModuleDir}/travis.yml`);
  rimraf(`${subModuleDir}/.git`); // we don't need a git repo / module
  spawnSync(
    `git add . --all`, // we'll add to the root git-repo
    spawnOpts);
  // by staging the cloned files, we can track all configuration changes
  // with a simple git-diff. The tool does not commit any changes.

  // all config changes are now available as diffs.

  // adjust sub-module's package.json
  let pkg = JSON.parse(fs.readFileSync(`${subModuleDir}/package.json`, 'utf8'));
  pkg = resetPackageJson(config, pkg);
  fs.writeFileSync(`${subModuleDir}/package.json`, JSON2(pkg), 'utf8');

  // reset sub-module's CHANGELOG.md
  fs.writeFileSync(`${subModuleDir}/CHANGELOG.md`, '', 'utf8'); // reset changelog.md

  // adjust sub-module's README.md
  sed(`${subModuleDir}/README.md`, re.app, config.subModule);
  sed(`${subModuleDir}/README.md`, re.org, config.npmNamespace);

  // copy a code-of-conduct from root repo to - required node v8.5+
  fs.copyFileSync(`${config.cwd}/code-of-conduct.md`, `${subModuleDir}/code-of-conduct.md`);

  // adjust sub-module's code-of-conduct.md (for contact email)
  if (config.conduct) {
    sed(`${subModuleDir}/code-of-conduct.md`, re.conduct, config.conduct);
    console.log('--');
    console.log(`code-of-conduct contact email set to ${config.conduct}`);
  } else {
    console.log(`Please update the contact email in code-of-conduct.md`);
  }

  spawnSync(`npx lerna bootstrap`, spawnOpts);
  spawnSync(`npx lerna run --scope ${pkg.name} build:dist`, spawnOpts);

  return config;
}

if (require.main !== module) {

  exports.configLernaSubModule = configLernaSubModule;
  exports.resetPackageJson = resetPackageJson;

} else {
  // this is the purpose
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  if (process.cwd() !== __dirname) {
    throw new Error(`Can only add sub-component from a lerna repository`);
  }
  // read package.json & pick namespace from it.
  const rootPkg = JSON.parse(fs.readFileSync(`${process.cwd()}/package.json`, 'utf8'));
  const rootNs = ((name) => {
    const parts = name.split('/');
    return parts.length === 2 ? parts[0] : '';
  })(rootPkg.name);

  let config = {
    cwd: process.cwd(),
    npmNamespace: rootNs
  };

  const p = new Promise((resolve, reject) => {

    console.log('---');
    const askSubModuleName = () => {

      // namespace is picked from parent by default. Can be adjusted manually post generation.
      rl.question(
        `Name of sub-module: ${rootNs}/`,
        answer => {
          if (answer) {
            config.subModule = answer;
            resolve(config);
          } else {
            // loop till we have an answer
            askSubModuleName();
          }
        });
    };
    askSubModuleName();

  }).then(config => new Promise((resolve, reject) => {

      rl.question(
        `description of sub-module (keep it short): `,
        answer => {
          config.description = answer || '';
          resolve(config);
        })

  })).then(config => new Promise((resolve, reject) => {

    rl.question(
      `Is this a private sub-module? (y/N) `,
      private => {
        const isPrivate = private.match(/\s*(y|Y)\s*/);
        config.private = isPrivate ? true : false;
        console.log('---');
        return resolve(config);
      });

  })).then(

    configLernaSubModule

  ).then(config => {

    console.log(`---`);
    console.log(`created sub-module ${config.giturl}`);
    console.log(`---`);
    process.exitCode = 0;

  }).catch(err => {

    console.error(err);
    process.exitCode = -1;

  }).then(() => process.exit(process.exitCode))
}
